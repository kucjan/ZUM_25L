from typing import Any

import numpy as np


def check_outliers_coverage(
    wrapper_preds: np.ndarray,
    oc_model_preds: np.ndarray,
) -> dict[str, Any]:
    """
    Check for which samples identification of outliers is covered
    for both 'OneClassWrapper' model and original one class classifier.
    Give coverages ratio.

    Args:
        wrapper_preds (np.ndarray): Predictions generated by 'OneClassWrapper' model.
        oc_model_preds (np.ndarray): Predictions generated by one class classifier.

    Returns:
        dict[str, Any]: Dictionary of coverage results.
    """
    wrapper_outlier_indices = np.where(wrapper_preds == 0)[0]
    oc_model_outlier_indices = np.where(oc_model_preds == 0)[0]
    both_outlier_indices = np.where((wrapper_preds == 0) & (oc_model_preds == 0))[0]

    wrapper_only_outlier_indices = np.where(
        (wrapper_preds == 0) & (oc_model_preds == 1)
    )[0]
    oc_model_only_outlier_indices = np.where(
        (wrapper_preds == 1) & (oc_model_preds == 0)
    )[0]

    num_wrapper_outliers = len(wrapper_outlier_indices)
    num_oc_outliers = len(oc_model_outlier_indices)
    num_both_outliers = len(both_outlier_indices)
    num_wrapper_only_outliers = len(wrapper_only_outlier_indices)
    num_oc_only_outliers = len(oc_model_only_outlier_indices)

    covered_ratio_oc_model_perspective = (
        num_both_outliers / num_oc_outliers if num_oc_outliers > 0 else 0.0
    )
    oc_model_uncovered_ratio = (
        num_oc_only_outliers / num_oc_outliers if num_oc_outliers > 0 else 0.0
    )
    wrapper_model_uncovered_ratio = (
        num_wrapper_only_outliers / num_wrapper_outliers
        if num_wrapper_outliers > 0
        else 0.0
    )
    wrapper_model_covered_ratio = (
        (1 - wrapper_model_uncovered_ratio) if num_wrapper_outliers > 0 else 0.0
    )

    return {
        "wrapper_outlier_indices": wrapper_outlier_indices,
        "oc_model_outlier_indices": oc_model_outlier_indices,
        "both_outlier_indices": both_outlier_indices,
        "wrapper_only_outlier_indices": wrapper_only_outlier_indices,
        "oc_model_only_outlier_indices": oc_model_only_outlier_indices,
        "num_of_covered": num_both_outliers,
        "covered_ratio": covered_ratio_oc_model_perspective,
        "uncovered_ratio": oc_model_uncovered_ratio,
        "wrapper_model_covered_ratio": wrapper_model_covered_ratio,
        "wrapper_model_uncovered_ratio": wrapper_model_uncovered_ratio,
    }
